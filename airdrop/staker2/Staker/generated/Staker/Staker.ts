// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddRewards extends ethereum.Event {
  get params(): AddRewards__Params {
    return new AddRewards__Params(this);
  }
}

export class AddRewards__Params {
  _event: AddRewards;

  constructor(event: AddRewards) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ClaimRewards extends ethereum.Event {
  get params(): ClaimRewards__Params {
    return new ClaimRewards__Params(this);
  }
}

export class ClaimRewards__Params {
  _event: ClaimRewards;

  constructor(event: ClaimRewards) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get userReward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RequestWithdraw extends ethereum.Event {
  get params(): RequestWithdraw__Params {
    return new RequestWithdraw__Params(this);
  }
}

export class RequestWithdraw__Params {
  _event: RequestWithdraw;

  constructor(event: RequestWithdraw) {
    this._event = event;
  }

  get requestAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountUSDC(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountBRBC(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountUsdc(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountBrbc(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get period(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountUSDC(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountBRBC(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Staker__infoAboutDepositsParsedResultParsedArrayOfTokensStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get USDCAmount(): BigInt {
    return this[1].toBigInt();
  }

  get BRBCAmount(): BigInt {
    return this[2].toBigInt();
  }

  get startTime(): BigInt {
    return this[3].toBigInt();
  }

  get deadline(): BigInt {
    return this[4].toBigInt();
  }

  get isStaked(): boolean {
    return this[5].toBoolean();
  }

  get isWhitelisted(): boolean {
    return this[6].toBoolean();
  }

  get lastRewardGrowth(): BigInt {
    return this[7].toBigInt();
  }
}

export class Staker__infoAboutDepositsParsedResult {
  value0: Array<Staker__infoAboutDepositsParsedResultParsedArrayOfTokensStruct>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<boolean>;

  constructor(
    value0: Array<
      Staker__infoAboutDepositsParsedResultParsedArrayOfTokensStruct
    >,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<boolean>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromBooleanArray(this.value3));
    return map;
  }
}

export class Staker__stakingInfoParsedResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Staker__stakingProgressParsedResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Staker__tokensLPResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: boolean;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: boolean,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class Staker__viewTotalEnteredResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Staker extends ethereum.SmartContract {
  static bind(address: Address): Staker {
    return new Staker("Staker", address);
  }

  BRBC(): Address {
    let result = super.call("BRBC", "BRBC():(address)", []);

    return result[0].toAddress();
  }

  try_BRBC(): ethereum.CallResult<Address> {
    let result = super.tryCall("BRBC", "BRBC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MANAGER(): Bytes {
    let result = super.call("MANAGER", "MANAGER():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MANAGER", "MANAGER():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  USDC(): Address {
    let result = super.call("USDC", "USDC():(address)", []);

    return result[0].toAddress();
  }

  try_USDC(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC", "USDC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  apr(): BigInt {
    let result = super.call("apr", "apr():(uint256)", []);

    return result[0].toBigInt();
  }

  try_apr(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("apr", "apr():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectedRewardsForToken(param0: BigInt): BigInt {
    let result = super.call(
      "collectedRewardsForToken",
      "collectedRewardsForToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_collectedRewardsForToken(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectedRewardsForToken",
      "collectedRewardsForToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  crossChain(): Address {
    let result = super.call("crossChain", "crossChain():(address)", []);

    return result[0].toAddress();
  }

  try_crossChain(): ethereum.CallResult<Address> {
    let result = super.tryCall("crossChain", "crossChain():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  endTime(): BigInt {
    let result = super.call("endTime", "endTime():(uint32)", []);

    return result[0].toBigInt();
  }

  try_endTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("endTime", "endTime():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(param0: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  infoAboutDepositsParsed(
    _tokenOwner: Address
  ): Staker__infoAboutDepositsParsedResult {
    let result = super.call(
      "infoAboutDepositsParsed",
      "infoAboutDepositsParsed(address):((uint256,uint256,uint256,uint32,uint32,bool,bool,uint256)[],uint256[],uint256[],bool[])",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );

    return new Staker__infoAboutDepositsParsedResult(
      result[0].toTupleArray<
        Staker__infoAboutDepositsParsedResultParsedArrayOfTokensStruct
      >(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBooleanArray()
    );
  }

  try_infoAboutDepositsParsed(
    _tokenOwner: Address
  ): ethereum.CallResult<Staker__infoAboutDepositsParsedResult> {
    let result = super.tryCall(
      "infoAboutDepositsParsed",
      "infoAboutDepositsParsed(address):((uint256,uint256,uint256,uint32,uint32,bool,bool,uint256)[],uint256[],uint256[],bool[])",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Staker__infoAboutDepositsParsedResult(
        value[0].toTupleArray<
          Staker__infoAboutDepositsParsedResultParsedArrayOfTokensStruct
        >(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBooleanArray()
      )
    );
  }

  isApprovedForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxPoolBRBC(): BigInt {
    let result = super.call("maxPoolBRBC", "maxPoolBRBC():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxPoolBRBC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxPoolBRBC", "maxPoolBRBC():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxPoolUSDC(): BigInt {
    let result = super.call("maxPoolUSDC", "maxPoolUSDC():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxPoolUSDC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxPoolUSDC", "maxPoolUSDC():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxUSDCAmount(): BigInt {
    let result = super.call("maxUSDCAmount", "maxUSDCAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxUSDCAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxUSDCAmount",
      "maxUSDCAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxUSDCAmountWhitelist(): BigInt {
    let result = super.call(
      "maxUSDCAmountWhitelist",
      "maxUSDCAmountWhitelist():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxUSDCAmountWhitelist(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxUSDCAmountWhitelist",
      "maxUSDCAmountWhitelist():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minUSDCAmount(): BigInt {
    let result = super.call("minUSDCAmount", "minUSDCAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minUSDCAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minUSDCAmount",
      "minUSDCAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  penalty(): BigInt {
    let result = super.call("penalty", "penalty():(uint256)", []);

    return result[0].toBigInt();
  }

  try_penalty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("penalty", "penalty():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  penaltyReceiver(): Address {
    let result = super.call(
      "penaltyReceiver",
      "penaltyReceiver():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_penaltyReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "penaltyReceiver",
      "penaltyReceiver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolBRBC(): BigInt {
    let result = super.call("poolBRBC", "poolBRBC():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolBRBC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolBRBC", "poolBRBC():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolUSDC(): BigInt {
    let result = super.call("poolUSDC", "poolUSDC():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolUSDC(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolUSDC", "poolUSDC():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestedAmount(): BigInt {
    let result = super.call(
      "requestedAmount",
      "requestedAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_requestedAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requestedAmount",
      "requestedAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardGrowth(): BigInt {
    let result = super.call("rewardGrowth", "rewardGrowth():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardGrowth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardGrowth", "rewardGrowth():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingInfoParsed(_tokenOwner: Address): Staker__stakingInfoParsedResult {
    let result = super.call(
      "stakingInfoParsed",
      "stakingInfoParsed(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );

    return new Staker__stakingInfoParsedResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_stakingInfoParsed(
    _tokenOwner: Address
  ): ethereum.CallResult<Staker__stakingInfoParsedResult> {
    let result = super.tryCall(
      "stakingInfoParsed",
      "stakingInfoParsed(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Staker__stakingInfoParsedResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  stakingProgressParsed(
    _tokenOwner: Address
  ): Staker__stakingProgressParsedResult {
    let result = super.call(
      "stakingProgressParsed",
      "stakingProgressParsed(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );

    return new Staker__stakingProgressParsedResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_stakingProgressParsed(
    _tokenOwner: Address
  ): ethereum.CallResult<Staker__stakingProgressParsedResult> {
    let result = super.tryCall(
      "stakingProgressParsed",
      "stakingProgressParsed(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Staker__stakingProgressParsedResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  startTime(): BigInt {
    let result = super.call("startTime", "startTime():(uint32)", []);

    return result[0].toBigInt();
  }

  try_startTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startTime", "startTime():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  timeBeforeUnlock(_tokenId: BigInt): BigInt {
    let result = super.call(
      "timeBeforeUnlock",
      "timeBeforeUnlock(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBigInt();
  }

  try_timeBeforeUnlock(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeBeforeUnlock",
      "timeBeforeUnlock(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokensLP(param0: BigInt): Staker__tokensLPResult {
    let result = super.call(
      "tokensLP",
      "tokensLP(uint256):(uint256,uint256,uint256,uint32,uint32,bool,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Staker__tokensLPResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBoolean(),
      result[7].toBigInt()
    );
  }

  try_tokensLP(param0: BigInt): ethereum.CallResult<Staker__tokensLPResult> {
    let result = super.tryCall(
      "tokensLP",
      "tokensLP(uint256):(uint256,uint256,uint256,uint32,uint32,bool,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Staker__tokensLPResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBoolean(),
        value[7].toBigInt()
      )
    );
  }

  viewApprovedWithdrawToken(_tokenId: BigInt): boolean {
    let result = super.call(
      "viewApprovedWithdrawToken",
      "viewApprovedWithdrawToken(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBoolean();
  }

  try_viewApprovedWithdrawToken(
    _tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "viewApprovedWithdrawToken",
      "viewApprovedWithdrawToken(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  viewCollectedRewards(_tokenId: BigInt): BigInt {
    let result = super.call(
      "viewCollectedRewards",
      "viewCollectedRewards(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBigInt();
  }

  try_viewCollectedRewards(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewCollectedRewards",
      "viewCollectedRewards(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewCollectedRewardsTotal(_tokenOwner: Address): BigInt {
    let result = super.call(
      "viewCollectedRewardsTotal",
      "viewCollectedRewardsTotal(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );

    return result[0].toBigInt();
  }

  try_viewCollectedRewardsTotal(
    _tokenOwner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewCollectedRewardsTotal",
      "viewCollectedRewardsTotal(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewRewards(_tokenId: BigInt): BigInt {
    let result = super.call("viewRewards", "viewRewards(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_viewRewards(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewRewards",
      "viewRewards(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewRewardsTotal(_tokenOwner: Address): BigInt {
    let result = super.call(
      "viewRewardsTotal",
      "viewRewardsTotal(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );

    return result[0].toBigInt();
  }

  try_viewRewardsTotal(_tokenOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewRewardsTotal",
      "viewRewardsTotal(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewTokensByOwner(_tokenOwner: Address): Array<BigInt> {
    let result = super.call(
      "viewTokensByOwner",
      "viewTokensByOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );

    return result[0].toBigIntArray();
  }

  try_viewTokensByOwner(
    _tokenOwner: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "viewTokensByOwner",
      "viewTokensByOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  viewTotalEntered(): Staker__viewTotalEnteredResult {
    let result = super.call(
      "viewTotalEntered",
      "viewTotalEntered():(uint256,uint256)",
      []
    );

    return new Staker__viewTotalEnteredResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_viewTotalEntered(): ethereum.CallResult<Staker__viewTotalEnteredResult> {
    let result = super.tryCall(
      "viewTotalEntered",
      "viewTotalEntered():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Staker__viewTotalEnteredResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  viewUSDCAmountOf(_tokenOwner: Address): BigInt {
    let result = super.call(
      "viewUSDCAmountOf",
      "viewUSDCAmountOf(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );

    return result[0].toBigInt();
  }

  try_viewUSDCAmountOf(_tokenOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewUSDCAmountOf",
      "viewUSDCAmountOf(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenOwner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewWhitelistInProgress(): boolean {
    let result = super.call(
      "viewWhitelistInProgress",
      "viewWhitelistInProgress():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_viewWhitelistInProgress(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "viewWhitelistInProgress",
      "viewWhitelistInProgress():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get usdcAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get brbcAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddRewardsCall extends ethereum.Call {
  get inputs(): AddRewardsCall__Inputs {
    return new AddRewardsCall__Inputs(this);
  }

  get outputs(): AddRewardsCall__Outputs {
    return new AddRewardsCall__Outputs(this);
  }
}

export class AddRewardsCall__Inputs {
  _call: AddRewardsCall;

  constructor(call: AddRewardsCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddRewardsCall__Outputs {
  _call: AddRewardsCall;

  constructor(call: AddRewardsCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class FundRequestsCall extends ethereum.Call {
  get inputs(): FundRequestsCall__Inputs {
    return new FundRequestsCall__Inputs(this);
  }

  get outputs(): FundRequestsCall__Outputs {
    return new FundRequestsCall__Outputs(this);
  }
}

export class FundRequestsCall__Inputs {
  _call: FundRequestsCall;

  constructor(call: FundRequestsCall) {
    this._call = call;
  }
}

export class FundRequestsCall__Outputs {
  _call: FundRequestsCall;

  constructor(call: FundRequestsCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RequestWithdrawCall extends ethereum.Call {
  get inputs(): RequestWithdrawCall__Inputs {
    return new RequestWithdrawCall__Inputs(this);
  }

  get outputs(): RequestWithdrawCall__Outputs {
    return new RequestWithdrawCall__Outputs(this);
  }
}

export class RequestWithdrawCall__Inputs {
  _call: RequestWithdrawCall;

  constructor(call: RequestWithdrawCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RequestWithdrawCall__Outputs {
  _call: RequestWithdrawCall;

  constructor(call: RequestWithdrawCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetCrossChainAddressCall extends ethereum.Call {
  get inputs(): SetCrossChainAddressCall__Inputs {
    return new SetCrossChainAddressCall__Inputs(this);
  }

  get outputs(): SetCrossChainAddressCall__Outputs {
    return new SetCrossChainAddressCall__Outputs(this);
  }
}

export class SetCrossChainAddressCall__Inputs {
  _call: SetCrossChainAddressCall;

  constructor(call: SetCrossChainAddressCall) {
    this._call = call;
  }

  get _crossChain(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCrossChainAddressCall__Outputs {
  _call: SetCrossChainAddressCall;

  constructor(call: SetCrossChainAddressCall) {
    this._call = call;
  }
}

export class SetMaxPoolBRBCCall extends ethereum.Call {
  get inputs(): SetMaxPoolBRBCCall__Inputs {
    return new SetMaxPoolBRBCCall__Inputs(this);
  }

  get outputs(): SetMaxPoolBRBCCall__Outputs {
    return new SetMaxPoolBRBCCall__Outputs(this);
  }
}

export class SetMaxPoolBRBCCall__Inputs {
  _call: SetMaxPoolBRBCCall;

  constructor(call: SetMaxPoolBRBCCall) {
    this._call = call;
  }

  get _maxPoolBRBC(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxPoolBRBCCall__Outputs {
  _call: SetMaxPoolBRBCCall;

  constructor(call: SetMaxPoolBRBCCall) {
    this._call = call;
  }
}

export class SetMaxPoolUSDCCall extends ethereum.Call {
  get inputs(): SetMaxPoolUSDCCall__Inputs {
    return new SetMaxPoolUSDCCall__Inputs(this);
  }

  get outputs(): SetMaxPoolUSDCCall__Outputs {
    return new SetMaxPoolUSDCCall__Outputs(this);
  }
}

export class SetMaxPoolUSDCCall__Inputs {
  _call: SetMaxPoolUSDCCall;

  constructor(call: SetMaxPoolUSDCCall) {
    this._call = call;
  }

  get _maxPoolUSDC(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxPoolUSDCCall__Outputs {
  _call: SetMaxPoolUSDCCall;

  constructor(call: SetMaxPoolUSDCCall) {
    this._call = call;
  }
}

export class SetMaxUSDCAmountCall extends ethereum.Call {
  get inputs(): SetMaxUSDCAmountCall__Inputs {
    return new SetMaxUSDCAmountCall__Inputs(this);
  }

  get outputs(): SetMaxUSDCAmountCall__Outputs {
    return new SetMaxUSDCAmountCall__Outputs(this);
  }
}

export class SetMaxUSDCAmountCall__Inputs {
  _call: SetMaxUSDCAmountCall;

  constructor(call: SetMaxUSDCAmountCall) {
    this._call = call;
  }

  get _maxUSDCAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxUSDCAmountCall__Outputs {
  _call: SetMaxUSDCAmountCall;

  constructor(call: SetMaxUSDCAmountCall) {
    this._call = call;
  }
}

export class SetMinUSDCAmountCall extends ethereum.Call {
  get inputs(): SetMinUSDCAmountCall__Inputs {
    return new SetMinUSDCAmountCall__Inputs(this);
  }

  get outputs(): SetMinUSDCAmountCall__Outputs {
    return new SetMinUSDCAmountCall__Outputs(this);
  }
}

export class SetMinUSDCAmountCall__Inputs {
  _call: SetMinUSDCAmountCall;

  constructor(call: SetMinUSDCAmountCall) {
    this._call = call;
  }

  get _minUSDCAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinUSDCAmountCall__Outputs {
  _call: SetMinUSDCAmountCall;

  constructor(call: SetMinUSDCAmountCall) {
    this._call = call;
  }
}

export class SetPenaltyCall extends ethereum.Call {
  get inputs(): SetPenaltyCall__Inputs {
    return new SetPenaltyCall__Inputs(this);
  }

  get outputs(): SetPenaltyCall__Outputs {
    return new SetPenaltyCall__Outputs(this);
  }
}

export class SetPenaltyCall__Inputs {
  _call: SetPenaltyCall;

  constructor(call: SetPenaltyCall) {
    this._call = call;
  }

  get _penalty(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPenaltyCall__Outputs {
  _call: SetPenaltyCall;

  constructor(call: SetPenaltyCall) {
    this._call = call;
  }
}

export class SetPenaltyAddressCall extends ethereum.Call {
  get inputs(): SetPenaltyAddressCall__Inputs {
    return new SetPenaltyAddressCall__Inputs(this);
  }

  get outputs(): SetPenaltyAddressCall__Outputs {
    return new SetPenaltyAddressCall__Outputs(this);
  }
}

export class SetPenaltyAddressCall__Inputs {
  _call: SetPenaltyAddressCall;

  constructor(call: SetPenaltyAddressCall) {
    this._call = call;
  }

  get _penaltyAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPenaltyAddressCall__Outputs {
  _call: SetPenaltyAddressCall;

  constructor(call: SetPenaltyAddressCall) {
    this._call = call;
  }
}

export class SetTimeCall extends ethereum.Call {
  get inputs(): SetTimeCall__Inputs {
    return new SetTimeCall__Inputs(this);
  }

  get outputs(): SetTimeCall__Outputs {
    return new SetTimeCall__Outputs(this);
  }
}

export class SetTimeCall__Inputs {
  _call: SetTimeCall;

  constructor(call: SetTimeCall) {
    this._call = call;
  }

  get _startTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _endTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTimeCall__Outputs {
  _call: SetTimeCall;

  constructor(call: SetTimeCall) {
    this._call = call;
  }
}

export class SetWhitelistCall extends ethereum.Call {
  get inputs(): SetWhitelistCall__Inputs {
    return new SetWhitelistCall__Inputs(this);
  }

  get outputs(): SetWhitelistCall__Outputs {
    return new SetWhitelistCall__Outputs(this);
  }
}

export class SetWhitelistCall__Inputs {
  _call: SetWhitelistCall;

  constructor(call: SetWhitelistCall) {
    this._call = call;
  }

  get whitelistedAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetWhitelistCall__Outputs {
  _call: SetWhitelistCall;

  constructor(call: SetWhitelistCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _amountUSDC(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class SweepTokensCall extends ethereum.Call {
  get inputs(): SweepTokensCall__Inputs {
    return new SweepTokensCall__Inputs(this);
  }

  get outputs(): SweepTokensCall__Outputs {
    return new SweepTokensCall__Outputs(this);
  }
}

export class SweepTokensCall__Inputs {
  _call: SweepTokensCall;

  constructor(call: SweepTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SweepTokensCall__Outputs {
  _call: SweepTokensCall;

  constructor(call: SweepTokensCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class WhitelistStakeCall extends ethereum.Call {
  get inputs(): WhitelistStakeCall__Inputs {
    return new WhitelistStakeCall__Inputs(this);
  }

  get outputs(): WhitelistStakeCall__Outputs {
    return new WhitelistStakeCall__Outputs(this);
  }
}

export class WhitelistStakeCall__Inputs {
  _call: WhitelistStakeCall;

  constructor(call: WhitelistStakeCall) {
    this._call = call;
  }

  get _amountUSDC(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WhitelistStakeCall__Outputs {
  _call: WhitelistStakeCall;

  constructor(call: WhitelistStakeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
